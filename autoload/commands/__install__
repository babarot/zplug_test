#!/usr/bin/env zsh

local     repo arg f_pkg c_pkg
local -aU repos
local -A  tags
local -a  failed_packages
local -A  checked_packages
local -i  max=0
local -F  SECONDS=0 start_time finish_time

while (( $# > 0 ))
do
    arg="$1"
    case "$arg" in
        -*|--*)
            __zplug::io::print::die \
                "$arg: unknown option\n"
            return 1
            ;;
        "")
            # Invalid
            return 1
            ;;
        */*)
            repos+=( "${arg:gs:@::}" )
            ;;
        *)
            return 1
            ;;
    esac
    shift
done

# Initialize
{
    start_time=$SECONDS

    if (( $#repos == 0 )); then
        # Case of existing not installed repos
        autoload -Uz __check__
        __check__ || repos=( "${reply[@]}" )
    fi

    for repo in "${repos[@]}"
    do
        (( $#repo > $max )) && max=$#repo
    done
}

# Main loop
for repo in "${repos[@]}"
do
    __zplug::core::tags::parse "$repo" || return 1
    tags=( "${reply[@]}" )

    # Skip items
    {
        if [[ -n $tags[if] ]] && ! eval "$tags[if]" &>/dev/null; then
            __zplug::io::print::put \
                "$fg[red]-$reset_color $fg[green]$repo$reset_color: skipped due to if tag\n"
            continue
        fi

        if __zplug::base::base::is_handler_defined "check" "$tags[from]"; then
            if __zplug::base::base::use_handler "check" "$tags[from]" "$repo"; then
                __zplug::io::print::put \
                    "$fg[red]-$reset_color $fg[green]$repo$reset_color: already installed\n"
                continue
            fi
        fi
    }

    # For checking
    if __zplug::base::base::is_handler_defined "check" "$tags[from]"; then
        checked_packages+=("$tags[name]" "$tags[from]")
    elif [[ -n $tags[dir] ]]; then
        checked_packages+=("$tags[name]" "$tags[dir]")
    else
        checked_packages+=("$tags[name]" "$ZPLUG_REPOS/$repo")
    fi

    __zplug::job::spinner::lock
    __zplug::job::spinner::spin &
    # Run installation in subprocess
    {
        trap '__zplug::job::spinner::unlock; trap - SIGINT' SIGINT

        # All variables are treated as local variable
        # because of background job (subprocess)
        local -i ret=2
        local -F SECONDS=0

        __zplug::job::spinner::echo \
            "%-20s %s\n" \
            "Installing..." \
            "$repo"

        if __zplug::base::base::is_handler_defined "install" "$tags[from]"; then
            __zplug::base::base::use_handler \
                "install" \
                "$tags[from]" \
                "$repo"
            ret=$status
        fi

        case "$ret" in
            0)
                __zplug::job::spinner::echo \
                    "$fg[green]%-20s$reset_color %-${max}s\t(%.2fs)\n" \
                    "Installed!" \
                    "$repo" \
                    $SECONDS

                # hook after installing
                __zplug::job::hook::build "$repo"
                ;;
            1)
                __zplug::job::spinner::echo \
                    "$fg[red]%-20s$reset_color %-${max}s\t(%.2fs)\n" \
                    "Failed to install" \
                    "$repo" \
                    $SECONDS
                ;;
            2)
                # TODO: __zplug::io::print::f
                __zplug::job::spinner::echo \
                    "[zplug] ERROR: sources/$tags[from] is not defined\n"
                ;;
        esac
    } &
    __zplug::job::queue::enqueue "$!"
    __zplug::job::queue::wait
done

# Finalize
{
    __zplug::job::queue::wait_all
    __zplug::job::spinner::unlock

    failed_packages=()
    for c_pkg in "${(k)checked_packages[@]}"
    do
        if __zplug::base::base::is_handler_defined "check" "$checked_packages[$c_pkg]"; then
            if ! __zplug::base::base::use_handler "check" "$checked_packages[$c_pkg]" "$c_pkg"; then
                failed_packages+=( "$c_pkg" )
            fi
        fi
    done

    # Skip footer prints
    if (( $#checked_packages == 0 )); then
        __zplug::io::print::f \
            --die \
            --zplug \
            "No package to install\n"
        return 1
    else
        if (( $#failed_packages == 0 )); then
            __zplug::io::print::put \
                "$fg_bold[default] ==> Installation finished successfully!$reset_color\n"
        else
            __zplug::io::print::die \
                "$fg_bold[red] ==> Installation failed for following packages:$reset_color\n"
            __zplug::io::print::die \
                "- %s\n" "${failed_packages[@]}"
        fi

        finish_time=$SECONDS

        __zplug::io::print::put \
            "zplug: total wall-time %f sec.\n" \
            $(( $finish_time - $start_time ))

        return $#failed_packages
    fi
}
